# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# https://aka.ms/yaml

parameters:
  - name: Sign
    type: boolean
    default: false
  - name: Integration
    type: boolean
    default: false

steps:
- task: powershell@2
  displayName: 'Show current PowerShell version information'
  inputs:
    targetType: inline
    script: 'echo $PSVersionTable'
    pwsh: true
- task: powershell@2
  displayName: 'Set maximum function count'
  inputs:
    targetType: inline
    script: '$MaximumFunctionCount=32768'
    pwsh: true
- task: powershell@2
  displayName: 'Install Dependencies Entra'
  inputs:
    targetType: inline
    script: |
      ./build/Install-Dependencies.ps1 -ModuleName Entra -Verbose      
    pwsh: true
- task: powershell@2
  displayName: 'Install PlatyPS'
  inputs:
    targetType: inline
    script: Install-Module PlatyPS -scope currentuser -Force
    pwsh: true
# - task: powershell@2
#   displayName: 'Create Module Help Files Entra'
#   inputs:
#     targetType: inline
#     script: |
#       Import-Module PlatyPS
#       . ./build/common-functions.ps1
#       Create-ModuleHelp -Module Entra
#     pwsh: true
- task: powershell@2
  displayName: '[Modularization ] Build Entra'
  inputs:
    targetType: inline
    script: |
      ./build/Create-EntraModule.ps1 -Module Entra -Verbose
      ./build/Create-EntraModule.ps1 -Module Entra -Root -Verbose
    pwsh: true
- ${{ if eq(parameters.Sign, true) }}:
  - template: ../common-templates/esrp/codesign-migrate.yml
    parameters:
      FolderPath: "bin"
      Pattern: "*.psm1, *.psd1, *.format.ps1xml, *.ps1"
  - task: PowerShell@2
    displayName: "Validate Authenticode Signature"
    inputs:
      targetType: "inline"
      pwsh: true
      script: ./build/ValidateAuthenticodeSignature.ps1
- task: powershell@2
  displayName: 'Create Module Files Entra'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Create-ModuleFolder
    pwsh: true
- task: 1ES.PublishBuildArtifacts@1
  displayName: 'Publish Module Files EntraBeta'
  inputs:
    PathtoPublish: 'bin'
    ArtifactName: 'Module Files'
- task: powershell@2
  displayName: 'Register Local Gallery'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Register-LocalGallery -Path $(Build.ArtifactStagingDirectory)
    pwsh: true    
- task: powershell@2
  displayName: 'Publish to Local Gallery Entra'
  inputs:
    targetType: inline
    script: ./build/Publish-LocalCompatModule.ps1 -Install
    pwsh: true
- task: 1ES.PublishBuildArtifacts@1
  displayName: 'Publish Module Nuget File Entra'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'Module Nuget'
- task: powershell@2
  displayName: 'Remove Build Folders'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Remove-BuildDirectories
    pwsh: true
- task: powershell@2
  displayName: 'Install Dependencies EntraBeta'
  inputs:
    targetType: inline
    script: |      
      ./build/Install-Dependencies.ps1 -ModuleName EntraBeta -Verbose
    pwsh: true
# - task: powershell@2
#   displayName: 'Create Module Help Files EntraBeta'
#   inputs:
#     targetType: inline
#     script: |
#       Import-Module PlatyPS
#       . ./build/common-functions.ps1
#       Create-ModuleHelp -Module EntraBeta
#     pwsh: true
- task: powershell@2
  displayName: '[Modularization ] Build EntraBeta'
  inputs:
    targetType: inline
    script: |
      ./build/Create-EntraModule.ps1 -Module EntraBeta -Verbose
      ./build/Create-EntraModule.ps1 -Module EntraBeta -Root -Verbose
    pwsh: true
- ${{ if eq(parameters.Sign, true) }}:
  - template: ../common-templates/esrp/codesign-migrate.yml
    parameters:
      FolderPath: "bin"
      Pattern: "*.psm1, *.psd1, *.format.ps1xml, *.ps1"
  - task: PowerShell@2
    displayName: "Validate Authenticode Signature"
    inputs:
      targetType: "inline"
      pwsh: true
      script: ./build/ValidateAuthenticodeSignature.ps1
- task: powershell@2
  displayName: 'Create Module Files EntraBeta'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Create-ModuleFolder
    pwsh: true
- task: 1ES.PublishBuildArtifacts@1
  displayName: 'Publish Module Files EntraBeta'
  inputs:
    PathtoPublish: 'bin'
    ArtifactName: 'Module Files'
- task: powershell@2
  displayName: 'Publish to Local Gallery EntraBeta'
  inputs:
    targetType: inline
    script: ./build/Publish-LocalCompatModule.ps1 -Install
    pwsh: true
- task: 1ES.PublishBuildArtifacts@1
  displayName: 'Publish Module Nuget File EntraBeta'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'Module Nuget'
- task: powershell@2
  displayName: 'Remove Build Folders'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Remove-BuildDirectories
    pwsh: true
- task: powershell@2
  displayName: 'Install Pester'
  inputs:
    targetType: inline
    script: Install-Module Pester -scope currentuser -SkipPublisherCheck -Force
    pwsh: true
- task: powershell@2
  displayName: 'Run tests Entra'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      cd test/Entra
      Invoke-Pester -OutputFile "./test/results/pester-test-results-ad.xml" -OutputFormat NUnitXml
- task: PublishTestResults@2
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: "./test/results/pester-test-results-ad.xml"
    failTaskOnFailedTests: true
- task: powershell@2
  displayName: 'Run tests Entra Beta'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      cd test/EntraBeta
      Invoke-Pester -OutputFile "./test/results/pester-test-results-ad.xml" -OutputFormat NUnitXml
- task: PublishTestResults@2
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: "./test/results/pester-test-results-ad.xml"
    failTaskOnFailedTests: true
- ${{ if eq(parameters.Integration, true) }}:
  - task: powershell@2
    displayName: 'Run Entra integration tests'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        cd test/module/Integration/Entra
        Invoke-Pester -OutputFile "./test/results/pester-test-results-preview.xml" -OutputFormat NUnitXml
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: "./test/results/pester-test-results-preview.xml"
      failTaskOnFailedTests: true
  - task: powershell@2
    displayName: 'Run EntraBeta integration tests'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        cd test/module/Integration/EntraBeta
        Invoke-Pester -OutputFile "./test/results/pester-test-results-preview.xml" -OutputFormat NUnitXml
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: "./test/results/pester-test-results-preview.xml"
      failTaskOnFailedTests: true
- task: powershell@2
  displayName: 'Remove Local Gallery'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Unregister-LocalGallery
    pwsh: true
- task: PSScriptAnalyzer@1
  displayName: 'Run PSScriptAnalyzer'
  inputs:
    Path: '$(Build.SourcesDirectory)'
    Settings: required
    IgnorePattern: .gdn
    Recurse: true
