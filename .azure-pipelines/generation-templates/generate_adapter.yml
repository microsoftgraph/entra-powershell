# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# https://aka.ms/yaml

parameters:
  - name: Sign
    type: boolean
    default: false

steps:
- task: powershell@2
  displayName: 'Show current PowerShell version information'
  inputs:
    targetType: inline
    script: 'echo $PSVersionTable'
    pwsh: false
- task: powershell@2
  displayName: 'Set maximum function count'
  inputs:
    targetType: inline
    script: '$MaximumFunctionCount=32768'
    pwsh: false
- task: powershell@2
  displayName: 'Install Dependencies Entra'
  inputs:
    targetType: inline
    script: |
      ./build/Install-Dependencies.ps1 -ModuleName Entra -Verbose      
    pwsh: false
- task: powershell@2
  displayName: 'Install PlatyPS'
  inputs:
    targetType: inline
    script: Install-Module PlatyPS -scope currentuser -Force
    pwsh: false
- task: powershell@2
  displayName: 'Create Module Help Files Entra'
  inputs:
    targetType: inline
    script: |
      Import-Module PlatyPS
      . ./build/common-functions.ps1
      Create-ModuleHelp -Module Entra
    pwsh: false
- task: powershell@2
  displayName: 'Build Entra'
  inputs:
    targetType: inline
    script: ./build/Create-CompatModule.ps1 -Module Entra -Verbose
    pwsh: false
- ${{ if eq(parameters.Sign, true) }}:
  - template: ../common-templates/esrp/codesign.yml
    parameters:
      FolderPath: "bin"
      Pattern: "*.psm1, *.psd1, *.format.ps1xml, *.ps1"
  - task: PowerShell@2
    displayName: "Validate Authenticode Signature"
    inputs:
      targetType: "inline"
      pwsh: true
      script: |
        $ModulePsd1 = "bin/Microsoft.Graph.Entra.psd1"
        $ModulePsm1 = "bin/Microsoft.Graph.Entra.psm1"
        ($ModulePsd1 | Get-AuthenticodeSignature).Status | Should -Be "Valid"
        ($ModulePsm1 | Get-AuthenticodeSignature).Status | Should -Be "Valid"
- task: powershell@2
  displayName: 'Create Module Files Entra'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Create-ModuleFolder
    pwsh: false
- task: PublishBuildArtifacts@1
  displayName: 'Publish Module Files Entra'
  inputs:
    ArtifactName: 'Module Files'
    PathtoPublish: 'bin'
- task: powershell@2
  displayName: 'Register Local Gallery'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Register-LocalGallery -Path $(Build.ArtifactStagingDirectory)
    pwsh: false    
- task: powershell@2
  displayName: 'Publish to Local Gallery Entra'
  inputs:
    targetType: inline
    script: ./build/Publish-LocalCompatModule.ps1 -Install
    pwsh: false
- task: PublishBuildArtifacts@1
  displayName: 'Publish Module Nuget File Entra'
  inputs:
    ArtifactName: 'Module Nuget'
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
- task: powershell@2
  displayName: 'Remove Build Folders'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Remove-BuildDirectories
    pwsh: false
- task: powershell@2
  displayName: 'Install Dependencies EntraBeta'
  inputs:
    targetType: inline
    script: |      
      ./build/Install-Dependencies.ps1 -ModuleName EntraBeta -Verbose
    pwsh: false
- task: powershell@2
  displayName: 'Create Module Help Files EntraBeta'
  inputs:
    targetType: inline
    script: |
      Import-Module PlatyPS
      . ./build/common-functions.ps1
      Create-ModuleHelp -Module EntraBeta
    pwsh: false
- task: powershell@2
  displayName: 'Build EntraBeta'
  inputs:
    targetType: inline
    script: |
      $MaximumFunctionCount=32768
      ./build/Create-CompatModule.ps1 -Module EntraBeta -Verbose
    pwsh: false
- ${{ if eq(parameters.Sign, true) }}:
  - template: ../common-templates/esrp/codesign.yml
    parameters:
      FolderPath: "bin"
      Pattern: "*.psm1, *.psd1, *.format.ps1xml, *.ps1"
  - task: PowerShell@2
    displayName: "Validate Authenticode Signature"
    inputs:
      targetType: "inline"
      pwsh: true
      script: |
        $ModulePsd1 = "bin/Microsoft.Graph.Entra.Beta.psd1"
        $ModulePsm1 = "bin/Microsoft.Graph.Entra.Beta.psm1"
        ($ModulePsd1 | Get-AuthenticodeSignature).Status | Should -Be "Valid"
        ($ModulePsm1 | Get-AuthenticodeSignature).Status | Should -Be "Valid"
- task: powershell@2
  displayName: 'Create Module Files EntraBeta'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Create-ModuleFolder
    pwsh: false
- task: PublishBuildArtifacts@1
  displayName: 'Publish Module Files EntraBeta'
  inputs:
    ArtifactName: 'Module Files'
    PathtoPublish: 'bin'    
- task: powershell@2
  displayName: 'Publish to Local Gallery EntraBeta'
  inputs:
    targetType: inline
    script: ./build/Publish-LocalCompatModule.ps1 -Install
    pwsh: false
- task: PublishBuildArtifacts@1
  displayName: 'Publish Module Nuget File EntraBeta'
  inputs:
    ArtifactName: 'Module Nuget'
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
- task: powershell@2
  displayName: 'Remove Build Folders'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Remove-BuildDirectories
    pwsh: false
- task: powershell@2
  displayName: 'Install Pester'
  inputs:
    targetType: inline
    script: Install-Module Pester -scope currentuser -SkipPublisherCheck -Force
    pwsh: false
- task: powershell@2
  displayName: 'Run tests Entra'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      cd test/module/entra
      Invoke-Pester -OutputFile "./test/results/pester-test-results-ad.xml" -OutputFormat NUnitXml
- task: PublishTestResults@2
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: "./test/results/pester-test-results-ad.xml"
    failTaskOnFailedTests: true
- task: powershell@2
  displayName: 'Run tests EntraBeta'  
  inputs:
    targetType: inline
    pwsh: true
    script: |
      cd test/module/entrabeta
      Invoke-Pester -OutputFile "./test/results/pester-test-results-preview.xml" -OutputFormat NUnitXml
- task: PublishTestResults@2
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: "./test/results/pester-test-results-preview.xml"
    failTaskOnFailedTests: true    
- task: powershell@2
  displayName: 'Remove Local Gallery'
  inputs:
    targetType: inline
    script: |
      . ./build/common-functions.ps1
      Unregister-LocalGallery
    pwsh: false
